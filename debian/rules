#!/usr/bin/make -f
# -*- makefile -*-

# Uncomment this to turn on verbose mode.
export DH_VERBOSE=1
export USE_STATIC_LIBRARIES=0

export DEB_BUILD_MAINT_OPTIONS=hardening=+all

ifndef THREADS_COUNT
    THREADS_COUNT=`grep -c ^processor /proc/cpuinfo`
endif

BUILD_TARGETS=clickhouse clickhouse-client clickhouse-server compressor config-processor corrector_utf8

%:
	dh $@ --parallel --max-parallel=4 --buildsystem=cmake

override_dh_auto_test:

override_dh_auto_build:
	dh_testdir
	# если не задан тип сборки запускаем cmake без указания типа, если задан - передаём его
	# для сборки в Debug нужно запустить так: debuild -e CMAKE_BUILD_TYPE=Debug
	mkdir -p build && cd build && cmake ..
	# TODO: возможно надо исправить
	# последовательно запускаем make для каждой из целей.
	# т.к. при параллельном запуске (make target1 target2) несколько раз одновременно создаются бинарники
	# и возникает raise с custom_command, использующие эти бинарники
	for target in ${BUILD_TARGETS}; \
	do \
		$(MAKE) -j$(THREADS_COUNT) -C build $$target; \
	done
	touch $@

override_dh_auto_clean:
	dh_testdir
	dh_testroot
	rm -rf build
	rm -rf obj-x86_64-linux-gnu
	rm -f override_dh_auto_build
	dh_clean

override_dh_auto_install:
	dh_testdir
	dh_testroot
	dh_prep
	cd build && \
	for target in ${BUILD_TARGETS}; \
	do \
		DESTDIR=../debian/tmp cmake -DCOMPONENT=$$target -P cmake_install.cmake; \
	done
	# В случае сборки clickhouse-server, добавим в пакет бинарник clang-а, ld и заголовочные файлы - для динамической компиляции.
	mkdir -p debian/tmp/usr/share/clickhouse/bin debian/tmp/usr/share/clickhouse/headers;
	#debian/copy_clang_binaries.sh debian/tmp/usr/share/clickhouse/bin/;
	./copy_headers.sh . debian/tmp/usr/share/clickhouse/headers;
	dh_install --sourcedir=debian/tmp

override_dh_installinit:
	dh_installinit --no-start --package=clickhouse-server --name=clickhouse-server
