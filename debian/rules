#!/usr/bin/make -f
# -*- makefile -*-

# Uncomment this to turn on verbose mode.
export DH_VERBOSE=1
export USE_STATIC_LIBRARIES=0
ifndef THREADS_COUNT
    THREADS_COUNT=`grep -c ^processor /proc/cpuinfo`
endif

DAEMONS=compressor clickhouse-client clickhouse-server config-processor

BUILD_TARGETS=clickhouse $(DAEMONS)

configure-stamp:
	dh_testdir
	rm -rf build
	make clean 1> /dev/null 2>&1 || echo "Nothing to clean"
	rm -f CMakeCache.txt
	mkdir -p build
	touch configure-stamp

build: build-arch build-indep
build-arch: build-stamp
build-indep: build-stamp
build-stamp: configure-stamp
	dh_testdir
	# если не задан тип сборки запускаем cmake без указания типа, если задан - передаём его
	# для сборки в Debug нужно запустить так: debuild -e CMAKE_BUILD_TYPE=Debug
	cd build && pwd && if [ -z CMAKE_BUILD_TYPE ]; then cmake ..; else cmake -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE) ..; fi
	# TODO: возможно надо исправить
	# последовательно запускаем make для каждой из целей.
	# т.к. при параллельном запуске (make target1 target2) несколько раз одновременно создаются бинарники
	# и возникает raise с custom_command, использующие эти бинарники
	for target in ${BUILD_TARGETS}; \
	do \
		$(MAKE) -j$(THREADS_COUNT) -C build $$target; \
	done
	touch $@

clean:
	dh_testdir
	dh_testroot
	rm -f configure-stamp build-stamp
	rm -rf build
	dh_clean

install: build
	dh_testdir
	dh_testroot
	dh_prep
	cd build && \
	for target in ${BUILD_TARGETS}; \
	do \
		DESTDIR=../debian/tmp cmake -DCOMPONENT=$$target -P cmake_install.cmake; \
	done

	# В случае сборки clickhouse-server, добавим в пакет бинарник clang-а, ld и заголовочные файлы - для динамической компиляции.
	if [ -e debian/tmp/etc/init.d/clickhouse-server ]; then \
		mkdir -p debian/tmp/usr/share/clickhouse/bin debian/tmp/usr/share/clickhouse/headers; \
		debian/copy_clang_binaries.sh debian/tmp/usr/share/clickhouse/bin/; \
		./copy_headers.sh . debian/tmp/usr/share/clickhouse/headers; \
	fi;

# Build architecture-independent files here.
binary-indep: build install
# We have nothing to do by default.

# Build architecture-dependent files here.
binary-arch: build install
	dh_testdir
	dh_testroot
	dh_installdocs
	dh_installinit --no-start --no-package=clickhouse-server-base
	dh_installinit --no-start --package=clickhouse-server-base --name=clickhouse-server
	dh_installcron
	dh_installdirs
	dh_installchangelogs
	dh_install --sourcedir=debian/tmp
	dh_strip
	dh_link
	dh_compress
	dh_fixperms
	dh_installdeb
	dh_shlibdeps --exclude=clang --exclude=stdc --exclude=ld
	dh_gencontrol
	dh_md5sums
	dh_builddeb -- -Zgzip -z3

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install
